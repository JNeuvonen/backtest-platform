"""Create initial tables

Revision ID: 5dbb7842f528
Revises: 9f0f69864c3e
Create Date: 2024-04-13 21:24:16.408034

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "5dbb7842f528"
down_revision: Union[str, None] = "9f0f69864c3e"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "trade",
        sa.Column("id", sa.INTEGER(), nullable=False),
        sa.Column("open_price", sa.FLOAT(), nullable=True),
        sa.Column("close_price", sa.FLOAT(), nullable=True),
        sa.Column("open_time", sa.INTEGER(), nullable=True),
        sa.Column("close_time", sa.INTEGER(), nullable=True),
        sa.Column("direction", sa.VARCHAR(), nullable=True),
        sa.Column("net_result", sa.FLOAT(), nullable=True),
        sa.Column("percent_result", sa.FLOAT(), nullable=True),
        sa.Column("backtest_id", sa.INTEGER(), nullable=True),
        sa.Column("predictions", sa.VARCHAR(), nullable=True),
        sa.Column("prices", sa.VARCHAR(), nullable=True),
        sa.ForeignKeyConstraint(
            ["backtest_id"],
            ["backtest.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "backtest",
        sa.Column("id", sa.INTEGER(), nullable=False),
        sa.Column("open_long_trade_cond", sa.VARCHAR(), nullable=True),
        sa.Column("open_short_trade_cond", sa.VARCHAR(), nullable=True),
        sa.Column("close_long_trade_cond", sa.VARCHAR(), nullable=True),
        sa.Column("close_short_trade_cond", sa.VARCHAR(), nullable=True),
        sa.Column("use_time_based_close", sa.BOOLEAN(), nullable=True),
        sa.Column("use_profit_based_close", sa.BOOLEAN(), nullable=True),
        sa.Column("use_stop_loss_based_close", sa.BOOLEAN(), nullable=True),
        sa.Column("use_short_selling", sa.BOOLEAN(), nullable=True),
        sa.Column("klines_until_close", sa.INTEGER(), nullable=True),
        sa.Column("name", sa.VARCHAR(), nullable=True),
        sa.Column("data", sa.VARCHAR(), nullable=True),
        sa.Column("trade_count", sa.INTEGER(), nullable=True),
        sa.Column("profit_factor", sa.FLOAT(), nullable=True),
        sa.Column("gross_profit", sa.FLOAT(), nullable=True),
        sa.Column("gross_loss", sa.FLOAT(), nullable=True),
        sa.Column("model_weights_id", sa.INTEGER(), nullable=True),
        sa.Column("train_job_id", sa.INTEGER(), nullable=True),
        sa.Column("dataset_id", sa.INTEGER(), nullable=True),
        sa.Column("start_balance", sa.FLOAT(), nullable=True),
        sa.Column("end_balance", sa.FLOAT(), nullable=True),
        sa.Column("result_perc", sa.FLOAT(), nullable=True),
        sa.Column("take_profit_threshold_perc", sa.FLOAT(), nullable=True),
        sa.Column("stop_loss_threshold_perc", sa.FLOAT(), nullable=True),
        sa.Column("backtest_range_start", sa.INTEGER(), nullable=True),
        sa.Column("backtest_range_end", sa.INTEGER(), nullable=True),
        sa.Column("best_trade_result_perc", sa.FLOAT(), nullable=True),
        sa.Column("worst_trade_result_perc", sa.FLOAT(), nullable=True),
        sa.Column("buy_and_hold_result_net", sa.FLOAT(), nullable=True),
        sa.Column("buy_and_hold_result_perc", sa.FLOAT(), nullable=True),
        sa.Column("share_of_winning_trades_perc", sa.FLOAT(), nullable=True),
        sa.Column("share_of_losing_trades_perc", sa.FLOAT(), nullable=True),
        sa.Column("max_drawdown_perc", sa.FLOAT(), nullable=True),
        sa.Column("cagr", sa.FLOAT(), nullable=True),
        sa.Column("market_exposure_time", sa.FLOAT(), nullable=True),
        sa.Column("risk_adjusted_return", sa.FLOAT(), nullable=True),
        sa.Column("buy_and_hold_cagr", sa.FLOAT(), nullable=True),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["dataset.id"],
        ),
        sa.ForeignKeyConstraint(
            ["model_weights_id"],
            ["model_weights.id"],
        ),
        sa.ForeignKeyConstraint(
            ["train_job_id"],
            ["train_job.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "model",
        sa.Column("id", sa.INTEGER(), nullable=False),
        sa.Column("dataset_id", sa.INTEGER(), nullable=True),
        sa.Column("target_col", sa.VARCHAR(), nullable=True),
        sa.Column("drop_cols", sa.VARCHAR(), nullable=True),
        sa.Column("null_fill_strategy", sa.VARCHAR(), nullable=True),
        sa.Column("model_code", sa.VARCHAR(), nullable=True),
        sa.Column("model_name", sa.VARCHAR(), nullable=True),
        sa.Column("optimizer_and_criterion_code", sa.VARCHAR(), nullable=True),
        sa.Column("validation_split", sa.VARCHAR(), nullable=True),
        sa.Column("scale_target", sa.BOOLEAN(), nullable=True),
        sa.Column("scaling_strategy", sa.INTEGER(), nullable=True),
        sa.Column("drop_cols_on_train", sa.VARCHAR(), nullable=True),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["dataset.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("model_name"),
    )
    op.create_table(
        "dataset",
        sa.Column("id", sa.INTEGER(), nullable=False),
        sa.Column("dataset_name", sa.VARCHAR(), nullable=True),
        sa.Column("timeseries_column", sa.VARCHAR(), nullable=True),
        sa.Column("price_column", sa.VARCHAR(), nullable=True),
        sa.Column("target_column", sa.VARCHAR(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("dataset_name"),
    )
    op.create_table(
        "data_transformation",
        sa.Column("id", sa.INTEGER(), nullable=False),
        sa.Column("backtest_id", sa.INTEGER(), nullable=False),
        sa.Column("created_at", sa.DATETIME(), nullable=True),
        sa.Column("updated_at", sa.DATETIME(), nullable=True),
        sa.Column("transformation_code", sa.VARCHAR(), nullable=False),
        sa.ForeignKeyConstraint(
            ["backtest_id"],
            ["backtest.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "model_weights",
        sa.Column("id", sa.INTEGER(), nullable=False),
        sa.Column("train_job_id", sa.INTEGER(), nullable=True),
        sa.Column("epoch", sa.INTEGER(), nullable=True),
        sa.Column("weights", sa.BLOB(), nullable=False),
        sa.Column("train_loss", sa.FLOAT(), nullable=True),
        sa.Column("val_loss", sa.FLOAT(), nullable=True),
        sa.Column("val_predictions", sa.VARCHAR(), nullable=True),
        sa.Column("train_predictions", sa.VARCHAR(), nullable=True),
        sa.ForeignKeyConstraint(
            ["train_job_id"],
            ["train_job.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "code_preset",
        sa.Column("id", sa.INTEGER(), nullable=False),
        sa.Column("code", sa.VARCHAR(), nullable=True),
        sa.Column("category", sa.VARCHAR(), nullable=True),
        sa.Column("name", sa.VARCHAR(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("category", "name", name="_category_name_uc"),
    )
    op.create_table(
        "train_job",
        sa.Column("id", sa.INTEGER(), nullable=False),
        sa.Column("is_training", sa.BOOLEAN(), nullable=True),
        sa.Column("name", sa.VARCHAR(), nullable=True),
        sa.Column("model_name", sa.VARCHAR(), nullable=True),
        sa.Column("num_epochs", sa.INTEGER(), nullable=True),
        sa.Column("epochs_ran", sa.INTEGER(), nullable=False),
        sa.Column("save_model_every_epoch", sa.BOOLEAN(), nullable=True),
        sa.Column("backtest_on_validation_set", sa.BOOLEAN(), nullable=True),
        sa.Column("backtest_kline_open_times", sa.VARCHAR(), nullable=True),
        sa.Column("backtest_prices", sa.VARCHAR(), nullable=True),
        sa.Column("device", sa.VARCHAR(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    pass
